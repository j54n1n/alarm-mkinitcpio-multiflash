#!/usr/bin/ash

#=====================================================================
# MULTIFLASH TOOLS
#=====================================================================

#=====================================================================
# Parses a comma seperated list of options.
# Arguments: variable name
# Example: _get_options $my_var
#          where my_var is: /srv/arch/armv6/img.tar.gz,1030,20,rpi-
#=====================================================================
_get_options() {
  local options=$1
  if [ ! -z $options ]; then
    local IFS=,
    set $options
    if [ ! -z $1 ] && [ ! -z $2 ] && [ ! -z $3 ] && [ ! -z $4 ]; then
      _NFS_PATH=$1
      _SRV_PORT=$2
      _SRV_PKTO=$3
      _HNM_PREF=$4
      return 0
    fi
  fi
  return 1
}

#=====================================================================
# Parses the interface name from the ip kernel command line.
# Arguments: variable name
# Example: _get_interface $ip
#          where ip=:::::eth0:dhcp
#=====================================================================
_get_interface() {
  local options=$1
  if [ ! -z $options ]; then
    local IFS=:
    set $options
    if [ ! -z $6 ]; then
      _NET_INTF=$6
      return 0
    fi
  fi
  return 1
}

#=====================================================================
# Parses a hexadecimal number and converts it to a Base36 number.
# Arguments: hexadecimal number
# Example: _base16_to_base36 fa5401bc
#=====================================================================
_base16_to_base36() {
  local base16=`echo $1 | tr '[:lower:]' '[:upper:]'`
  local base36=`echo "obase=36;ibase=16;$base16" | BC_LINE_LENGTH=0 bc`
  for digit in $base36; do
    # HACK:
    # Don't call me stupid here but the built-in busybox shell has
    # limited support for arrays or else I would have implemented it
    # in an different way. Cheers Julian.
    case $digit in
      00|0) echo -n '0' ;;
      01|1) echo -n '1' ;;
      02|2) echo -n '2' ;;
      03|3) echo -n '3' ;;
      04|4) echo -n '4' ;;
      05|5) echo -n '5' ;;
      06|6) echo -n '6' ;;
      07|7) echo -n '7' ;;
      08|8) echo -n '8' ;;
      09|9) echo -n '9' ;;
      10) echo -n 'a' ;;
      11) echo -n 'b' ;;
      12) echo -n 'c' ;;
      13) echo -n 'd' ;;
      14) echo -n 'e' ;;
      15) echo -n 'f' ;;
      16) echo -n 'g' ;;
      17) echo -n 'h' ;;
      18) echo -n 'i' ;;
      19) echo -n 'j' ;;
      20) echo -n 'k' ;;
      21) echo -n 'l' ;;
      22) echo -n 'm' ;;
      23) echo -n 'n' ;;
      24) echo -n 'o' ;;
      25) echo -n 'p' ;;
      26) echo -n 'q' ;;
      27) echo -n 'r' ;;
      28) echo -n 's' ;;
      29) echo -n 't' ;;
      30) echo -n 'u' ;;
      31) echo -n 'v' ;;
      32) echo -n 'w' ;;
      33) echo -n 'x' ;;
      34) echo -n 'y' ;;
      35) echo -n 'z' ;;
    esac
  done && echo
}

#=====================================================================
# Sets the hostname with a given prefix and appends the CPU serial
# number to it.
# Arguments: root directory, hostname prefix
# Example: _set_hostname /new_root my-prefix-
#=====================================================================
_set_hostname() {
  local root_dir=$1
  local hostname_prefix=$2
  local card_id=`cat /sys/block/mmcblk0/device/cid`
  local serial_number=`_base16_to_base36 $card_id`
  local new_hostname="$hostname_prefix$serial_number"
  msg ">>> Configuring new hostname '$new_hostname':"
  msg "> echo $new_hostname > $root_dir/etc/hostname"
  echo $new_hostname > $root_dir/etc/hostname
}

#=====================================================================
# Updates the SD card with boot and root partition from a given
# server IP and NFS share file path.
# Arguments: server IP, NFS file path
# Example: _update_sdcard 192.168.178.252 /srv/arch/armv6/img.tar.gz
#=====================================================================
_update_sdcard() {
  local server_ip=$1
  local nfs_path=$(dirname "$2")
  local nfs_img=$(basename "$2")
  local wdir='/tmp'
  local nfs_mount="$wdir/nfs"
  local boot_mount="$wdir/boot"
  local root_mount="$wdir/root"

  # Mount partitions.
  mkdir $nfs_mount $boot_mount $root_mount
  msg ">>> Mounting NFS share on $nfs_mount:"
  msg "> nfsmount -o udp $server_ip:$nfs_path $nfs_mount"
  nfsmount -o udp $server_ip:$nfs_path $nfs_mount
  msg ">>> Mounting boot partition on $boot_mount:"
  msg "> mount /dev/mmcblk0p1 $boot_mount"
  mount /dev/mmcblk0p1 $boot_mount
  msg ">>> Mounting root partition on $root_mount:"
  msg "> mount /dev/mmcblk0p2 $root_mount"
  mount /dev/mmcblk0p2 $root_mount

  # Update SD card.
  msg ">>> Writing root partition from $nfs_mount:"
  msg "> bsdtar -xpf $nfs_mount/$nfs_img -C $root_mount"
  bsdtar -xpf $nfs_mount/$nfs_img -C $root_mount
  sync
  msg ">>> Updating boot partition from $root_mount/boot:"
  msg "> cp -r $root_mount/boot/* $boot_mount/ && rm -rf $root_mount/boot/*"
  cp -r $root_mount/boot/* $boot_mount/ && rm -rf $root_mount/boot/*

  # Unmount partitions.
  msg ">>> Unmounting partitions on $wdir:"
  msg "> umount $nfs_mount $boot_mount $root_mount"
  umount $nfs_mount $boot_mount $root_mount
  rmdir $nfs_mount $boot_mount $root_mount
}

#=====================================================================
# MULTIFLASH HOOKS
#=====================================================================

run_hook() {
  _get_options $multiflash || return
  _SRV_IP=`whereisip $_NFS_PATH $_SRV_PORT $_SRV_PKTO` || return
  _update_sdcard $_SRV_IP $_NFS_PATH
}

run_latehook() {
  _get_interface $ip && {
    msg ">>> Resetting network interface $_NET_INTF"
    ip addr flush dev $_NET_INTF
    ip route flush dev $_NET_INTF
    ip link set dev $_NET_INTF down
  }
  _get_options $multiflash || return
  _set_hostname /new_root $_HNM_PREF
}
